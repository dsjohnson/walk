// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ctmc_n2ll_arma
Rcpp::List ctmc_n2ll_arma(const arma::sp_mat& L, const arma::vec& dt, const int& ns, const arma::umat& from_to, const arma::vec& Xb_q_r, const arma::vec& Xb_q_m, const double& p, const arma::rowvec& delta, const double& eq_prec, const int& link_r, const double& a_r, const double& l_r, const double& u_r, const int& link_m, const double& a_m, const int& form, const double& k, const bool& norm);
RcppExport SEXP _walk_ctmc_n2ll_arma(SEXP LSEXP, SEXP dtSEXP, SEXP nsSEXP, SEXP from_toSEXP, SEXP Xb_q_rSEXP, SEXP Xb_q_mSEXP, SEXP pSEXP, SEXP deltaSEXP, SEXP eq_precSEXP, SEXP link_rSEXP, SEXP a_rSEXP, SEXP l_rSEXP, SEXP u_rSEXP, SEXP link_mSEXP, SEXP a_mSEXP, SEXP formSEXP, SEXP kSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const int& >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xb_q_r(Xb_q_rSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xb_q_m(Xb_q_mSEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eq_prec(eq_precSEXP);
    Rcpp::traits::input_parameter< const int& >::type link_r(link_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_r(a_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type l_r(l_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_r(u_rSEXP);
    Rcpp::traits::input_parameter< const int& >::type link_m(link_mSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_m(a_mSEXP);
    Rcpp::traits::input_parameter< const int& >::type form(formSEXP);
    Rcpp::traits::input_parameter< const double& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(ctmc_n2ll_arma(L, dt, ns, from_to, Xb_q_r, Xb_q_m, p, delta, eq_prec, link_r, a_r, l_r, u_r, link_m, a_m, form, k, norm));
    return rcpp_result_gen;
END_RCPP
}
// ctmc_predict_arma
Rcpp::List ctmc_predict_arma(const arma::sp_mat& L, const arma::vec& obs, const arma::vec& dt, const int& ns, const arma::umat& from_to, const arma::vec& Xb_q_r, const arma::vec& Xb_q_m, const double& p, const arma::rowvec& delta, const double& eq_prec, const double& trunc_tol, const int& link_r, const double& a_r, const double& l_r, const double& u_r, const int& link_m, const double& a_m, const int& form, const double& k, const bool& norm);
RcppExport SEXP _walk_ctmc_predict_arma(SEXP LSEXP, SEXP obsSEXP, SEXP dtSEXP, SEXP nsSEXP, SEXP from_toSEXP, SEXP Xb_q_rSEXP, SEXP Xb_q_mSEXP, SEXP pSEXP, SEXP deltaSEXP, SEXP eq_precSEXP, SEXP trunc_tolSEXP, SEXP link_rSEXP, SEXP a_rSEXP, SEXP l_rSEXP, SEXP u_rSEXP, SEXP link_mSEXP, SEXP a_mSEXP, SEXP formSEXP, SEXP kSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const int& >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xb_q_r(Xb_q_rSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xb_q_m(Xb_q_mSEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type eq_prec(eq_precSEXP);
    Rcpp::traits::input_parameter< const double& >::type trunc_tol(trunc_tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type link_r(link_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_r(a_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type l_r(l_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_r(u_rSEXP);
    Rcpp::traits::input_parameter< const int& >::type link_m(link_mSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_m(a_mSEXP);
    Rcpp::traits::input_parameter< const int& >::type form(formSEXP);
    Rcpp::traits::input_parameter< const double& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(ctmc_predict_arma(L, obs, dt, ns, from_to, Xb_q_r, Xb_q_m, p, delta, eq_prec, trunc_tol, link_r, a_r, l_r, u_r, link_m, a_m, form, k, norm));
    return rcpp_result_gen;
END_RCPP
}
// logit
arma::vec logit(const arma::vec& x, const double& L, const double& U);
RcppExport SEXP _walk_logit(SEXP xSEXP, SEXP LSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(logit(x, L, U));
    return rcpp_result_gen;
END_RCPP
}
// soft_plus
arma::vec soft_plus(const arma::vec& x, const double& a);
RcppExport SEXP _walk_soft_plus(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_plus(x, a));
    return rcpp_result_gen;
END_RCPP
}
// hard_plus
arma::vec hard_plus(const arma::vec& x);
RcppExport SEXP _walk_hard_plus(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hard_plus(x));
    return rcpp_result_gen;
END_RCPP
}
// clip_Q
arma::sp_mat clip_Q(const arma::sp_mat& Q, const double& clip);
RcppExport SEXP _walk_clip_Q(SEXP QSEXP, SEXP clipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const double& >::type clip(clipSEXP);
    rcpp_result_gen = Rcpp::wrap(clip_Q(Q, clip));
    return rcpp_result_gen;
END_RCPP
}
// phi_exp_lnG
arma::mat phi_exp_lnG(const arma::mat& phi, const arma::sp_mat& lnG, const double& prec);
RcppExport SEXP _walk_phi_exp_lnG(SEXP phiSEXP, SEXP lnGSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type lnG(lnGSEXP);
    Rcpp::traits::input_parameter< const double& >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(phi_exp_lnG(phi, lnG, prec));
    return rcpp_result_gen;
END_RCPP
}
// load_Q_mult
arma::sp_mat load_Q_mult(const arma::umat& from_to, const arma::vec& Xb_q_r, const arma::vec& Xb_q_m, const int& ns, const int& link_r, const double& a_r, const double& l_r, const double& u_r, const int& link_m, const double& a_m, const bool& norm);
RcppExport SEXP _walk_load_Q_mult(SEXP from_toSEXP, SEXP Xb_q_rSEXP, SEXP Xb_q_mSEXP, SEXP nsSEXP, SEXP link_rSEXP, SEXP a_rSEXP, SEXP l_rSEXP, SEXP u_rSEXP, SEXP link_mSEXP, SEXP a_mSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xb_q_r(Xb_q_rSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xb_q_m(Xb_q_mSEXP);
    Rcpp::traits::input_parameter< const int& >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const int& >::type link_r(link_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_r(a_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type l_r(l_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_r(u_rSEXP);
    Rcpp::traits::input_parameter< const int& >::type link_m(link_mSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_m(a_mSEXP);
    Rcpp::traits::input_parameter< const bool& >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(load_Q_mult(from_to, Xb_q_r, Xb_q_m, ns, link_r, a_r, l_r, u_r, link_m, a_m, norm));
    return rcpp_result_gen;
END_RCPP
}
// load_Q_add
arma::sp_mat load_Q_add(const arma::umat& from_to, const arma::vec& Xb_q_r, const arma::vec& Xb_q_m, const int& ns, const int& link_r, const double& a_r, const int& link_m, const double& a_m);
RcppExport SEXP _walk_load_Q_add(SEXP from_toSEXP, SEXP Xb_q_rSEXP, SEXP Xb_q_mSEXP, SEXP nsSEXP, SEXP link_rSEXP, SEXP a_rSEXP, SEXP link_mSEXP, SEXP a_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xb_q_r(Xb_q_rSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xb_q_m(Xb_q_mSEXP);
    Rcpp::traits::input_parameter< const int& >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const int& >::type link_r(link_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_r(a_rSEXP);
    Rcpp::traits::input_parameter< const int& >::type link_m(link_mSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_m(a_mSEXP);
    rcpp_result_gen = Rcpp::wrap(load_Q_add(from_to, Xb_q_r, Xb_q_m, ns, link_r, a_r, link_m, a_m));
    return rcpp_result_gen;
END_RCPP
}
// load_Q_sde
arma::sp_mat load_Q_sde(const arma::umat& from_to, const arma::vec& Xb_q_r, const arma::vec& Xb_q_m, const int& ns, const double& k, const double& a_r);
RcppExport SEXP _walk_load_Q_sde(SEXP from_toSEXP, SEXP Xb_q_rSEXP, SEXP Xb_q_mSEXP, SEXP nsSEXP, SEXP kSEXP, SEXP a_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type from_to(from_toSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xb_q_r(Xb_q_rSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xb_q_m(Xb_q_mSEXP);
    Rcpp::traits::input_parameter< const int& >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const double& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_r(a_rSEXP);
    rcpp_result_gen = Rcpp::wrap(load_Q_sde(from_to, Xb_q_r, Xb_q_m, ns, k, a_r));
    return rcpp_result_gen;
END_RCPP
}
// dense_to_sparse
arma::sp_mat dense_to_sparse(const arma::mat& M, const double& tol);
RcppExport SEXP _walk_dense_to_sparse(SEXP MSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(dense_to_sparse(M, tol));
    return rcpp_result_gen;
END_RCPP
}
// my_test
arma::mat my_test(const arma::mat v, SEXP Q, double prec, bool renorm, bool t2, bool checks);
RcppExport SEXP _walk_my_test(SEXP vSEXP, SEXP QSEXP, SEXP precSEXP, SEXP renormSEXP, SEXP t2SEXP, SEXP checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< bool >::type renorm(renormSEXP);
    Rcpp::traits::input_parameter< bool >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< bool >::type checks(checksSEXP);
    rcpp_result_gen = Rcpp::wrap(my_test(v, Q, prec, renorm, t2, checks));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_walk_ctmc_n2ll_arma", (DL_FUNC) &_walk_ctmc_n2ll_arma, 18},
    {"_walk_ctmc_predict_arma", (DL_FUNC) &_walk_ctmc_predict_arma, 20},
    {"_walk_logit", (DL_FUNC) &_walk_logit, 3},
    {"_walk_soft_plus", (DL_FUNC) &_walk_soft_plus, 2},
    {"_walk_hard_plus", (DL_FUNC) &_walk_hard_plus, 1},
    {"_walk_clip_Q", (DL_FUNC) &_walk_clip_Q, 2},
    {"_walk_phi_exp_lnG", (DL_FUNC) &_walk_phi_exp_lnG, 3},
    {"_walk_load_Q_mult", (DL_FUNC) &_walk_load_Q_mult, 11},
    {"_walk_load_Q_add", (DL_FUNC) &_walk_load_Q_add, 8},
    {"_walk_load_Q_sde", (DL_FUNC) &_walk_load_Q_sde, 6},
    {"_walk_dense_to_sparse", (DL_FUNC) &_walk_dense_to_sparse, 2},
    {"_walk_my_test", (DL_FUNC) &_walk_my_test, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_walk(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
